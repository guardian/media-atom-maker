AWSTemplateFormatVersion: "2010-09-09"
Description: "A pipeline for uploading video to YouTube or an S3 bucket"

# This template is separate from the main one and is managed as a sub-deployment in riff-raff.yaml.
# The main app looks up the resources by STAGE relying on the naming convention.

Parameters:
  BuildBucket:
    Description: "The S3 bucket where builds live"
    Type: "String"
  ConfigBucket:
    Description: "The S3 bucket where configuration lives"
    Type: "String"
  App:
    Description: "App name"
    Type: "String"
    Default: "media-atom-pipeline"
  Stack:
    Description: "Stack name"
    Type: "String"
    Default: "media-service"
  Stage:
    Description: "Stage name"
    Type: "String"
    Default: "DEV"
  UploadBucketName:
    Description: "The S3 bucket where videos are uploaded to"
    Type: "String"
  DestinationBucketName:
    Description: "The S3 bucket where transcoded videos are stored"
    Type: "String"
  MediaAtomTable:
    Description: "The Dynamo table where preview media atoms are stored"
    Type: "String"
  ContentAtomArn:
    Description: "ARN of the cross account role to access the content atom kinesis stream"
    Type: "String"
  ManualPlutoTable:
    Description: "The Dynamo table to store videos that must be manually synced with Pluto"
    Type: "String"
  NotificationEmailFrom:
    Description: "email address where notifications of missing pluto ids are sent from"
    Type: "String"
    Default: "digitalcms.dev@guardian.co.uk"
  AlertWebhook:
    Description: "Where CloudWatch alerts are sent"
    Type: "String"
  PlutoSendbackStreamName:
    Description: Name (not ARN) of the Kinesis stream which passes messages back to Pluto
    Type: String
  PlutoSendbackStreamKmsKey:
    Description: ARN of the KMS key used to encrypt messages sent to pluto
    Type: String

Conditions:
  CreateProdResources: !Equals [!Ref "Stage", "PROD"]
  CreateCodeResources: !Equals [!Ref "Stage", "CODE"]
  CreateDevResources:  !Equals [!Ref "Stage", "DEV"]

Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "LambdaExecutionPolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
                Resource: "*"
              - Effect: "Allow"
                Action: ["s3:GetObject"]
                Resource: !Sub ["arn:aws:s3:::${Bucket}/*", { "Bucket": !Ref ConfigBucket }]
              - Effect: "Allow"
                Action: ["s3:*"]
                Resource:
                  - !Sub ["arn:aws:s3:::${Bucket}", { "Bucket": !Ref UploadBucketName }]
                  - !Sub ["arn:aws:s3:::${Bucket}/*", { "Bucket": !Ref UploadBucketName }]
              - Effect: "Allow"
                Action: ["dynamodb:*"]
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${MediaAtomTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ManualPlutoTable}"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${App}-cache-${Stage}"
              - Effect: "Allow"
                Action: ["elastictranscoder:CreateJob", "elastictranscoder:ReadJob"]
                Resource: "arn:aws:elastictranscoder:*"
              - Effect: "Allow"
                Action: [ "mediaconvert:CreateJob", "mediaconvert:GetJob" ]
                Resource: "*"
              - Effect: "Allow"
                Action: [ "iam:PassRole" ]
                Resource: !GetAtt [ MediaConvertRole, Arn ]
              - Effect: Allow
                Action:
                - ses:SendEmail
                Resource: '*'
                Condition:
                  StringEquals:
                    ses:FromAddress: !Ref 'NotificationEmailFrom'
        - PolicyName: LambdaKinesisAccessPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kinesis:PutRecord
                  - kinesis:PutRecords
                Resource:
                  - !Sub "arn:aws:kinesis:${AWS::Region}:${AWS::AccountId}:stream/${PlutoSendbackStreamName}"
              - Effect: Allow
                Action: kms:GenerateDataKey
                Resource: !Ref PlutoSendbackStreamKmsKey

  ContentAtomCrossAccountPolicyCODE:
    Type: AWS::IAM::Policy
    Condition: CreateCodeResources
    Properties:
      PolicyName: CrossAccountAccessPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Resource:
          - !Ref 'ContentAtomArn'
      Roles:
      - !Ref 'LambdaExecutionRole'

  ContentAtomCrossAccountPolicyPROD:
    Type: AWS::IAM::Policy
    Condition: CreateProdResources
    Properties:
      PolicyName: CrossAccountAccessPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
          - sts:AssumeRole
          Resource:
          - !Ref 'ContentAtomArn'
      Roles:
      - !Ref 'LambdaExecutionRole'

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  MediaConvertRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "mediaconvert.amazonaws.com"
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: "S3AccessPolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:Get*"
                  - "s3:List*"
                Resource:
                  - !Sub [ "arn:aws:s3:::${Bucket}/*", { "Bucket": !Ref UploadBucketName } ]
              - Effect: "Allow"
                Action:
                  - "s3:Put*"
                Resource:
                  - !Sub [ "arn:aws:s3:::${Bucket}/media-convert-testing/*", { "Bucket": !Ref DestinationBucketName } ]
  MediaConvertJobTemplate:
    Type: AWS::MediaConvert::JobTemplate
    Properties:
      Description: Media Atom Maker pipeline
      Name: !Sub "media-atom-maker-transcoder-${Stage}"
      SettingsJson:
        TimecodeConfig:
          Source: ZEROBASED
        OutputGroups:
          - Name: File Group
            Outputs:
              - ContainerSettings:
                  Container: MP4
                  Mp4Settings: { }
                VideoDescription:
                  Width: 1280
                  Height: 720
                  ScalingBehavior: FIT_NO_UPSCALE
                  CodecSettings:
                    Codec: H_264
                    H264Settings:
                      Bitrate: 2400000
                      RateControlMode: CBR
                      CodecProfile: BASELINE
                      CodecLevel: LEVEL_3_1
                      EntropyEncoding: CAVLC # This is only specified because it is required if you chose CodecProfile: BASELINE
                      NumberReferenceFrames: 3
                      NumberBFramesBetweenReferenceFrames: 0 # This is only specified because it is required if you chose CodecProfile: BASELINE
                      FramerateControl: SPECIFIED
                      FramerateNumerator: 30000
                      FramerateDenominator: 1001
                      HrdBufferSize: 16800000
                AudioDescriptions:
                  - CodecSettings:
                      Codec: AAC
                      AacSettings:
                        Bitrate: 160000
                        CodingMode: CODING_MODE_2_0
                        SampleRate: 44100
                        CodecProfile: LC
                    AudioSourceName: Audio Selector 1
            OutputGroupSettings:
              Type: FILE_GROUP_SETTINGS
              FileGroupSettings: { }
        FollowSource: 1
        Inputs:
          - AudioSelectors:
              Audio Selector 1:
                DefaultSelection: DEFAULT
            VideoSelector: { }
            TimecodeSource: ZEROBASED
      Tags:
        App: !Ref App
        Stack: !Ref Stack
        Stage: !Ref Stage

  # The following entries are filled in based on the LambdaConfig entries in build.sbt.

  {{GetChunkFromS3}}

  {{UploadChunkToYouTube}}

  {{MultipartCopyChunkInS3}}

  {{CompleteMultipartCopy}}

  {{SendToPluto}}

  {{SendToTranscoder}}

  {{SendToTranscoderV2}}

  {{GetTranscodingProgress}}

  {{GetTranscodingProgressV2}}

  {{AddAssetToAtom}}

  {{AddUploadDataToCache}}

  # Remembers completed uploads since the data is deleted if the pipeline definition is updated
  VideoPipelineCache:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TableName: !Sub "${App}-cache-${Stage}"
      AttributeDefinitions:
      - AttributeName: id
        AttributeType: S
      KeySchema:
      - AttributeName: id
        KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
      Tags:
        - Key: devx-backup-enabled
          Value: true

  VideoPipelinePROD:
    Type: "AWS::StepFunctions::StateMachine"
    Condition: CreateProdResources
    Properties:
      DefinitionString:
        !Sub
          - |-
            {{state_machine}}
          -
            {}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  VideoPipelineCODE:
    Type: "AWS::StepFunctions::StateMachine"
    Condition: CreateCodeResources
    Properties:
      DefinitionString:
        !Sub
          - |-
            {{state_machine}}
          -
            {}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  VideoPipelineDEV:
    Type: "AWS::StepFunctions::StateMachine"
    Condition: CreateDevResources
    Properties:
      DefinitionString:
        !Sub
          - |-
            {{state_machine}}
          -
            {}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]

  AlertTopic:
    Type: AWS::SNS::Topic
    Condition: CreateProdResources
    Properties:
      DisplayName: !Join ['-', [!Ref 'Stage', Alerts]]
      KmsMasterKeyId: 'alias/aws/sns'
      Subscription:
      - Endpoint: !Ref 'AlertWebhook'
        Protocol: https

  UploadFailedAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateProdResources
    Properties:
      AlarmDescription: Video upload failed
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Threshold: '1'
      Namespace: AWS/States
      MetricName: ExecutionsFailed
      Dimensions:
      - Name: StateMachineArn
        Value: !Ref 'VideoPipelinePROD'
      Period: '60'
      EvaluationPeriods: '1'
      Statistic: Maximum
      AlarmActions:
      - !Ref 'AlertTopic'
