# optional limit
GET     /api2/atoms                     controllers.Api2.getMediaAtoms(search: Option[String], limit: Option[Int])
POST    /api2/atoms                     controllers.Api2.createMediaAtom

GET     /api2/atoms/:id                 controllers.Api2.getMediaAtom(id)
PUT     /api2/atoms/:id                 controllers.Api2.updateMediaAtom(id)
DELETE  /api2/atom/:id                  controllers.Api2.deleteAtom(id)

GET     /api2/atoms/:id/published       controllers.Api2.getPublishedMediaAtom(id)
PUT     /api2/atom/:id/publish          controllers.Api2.publishMediaAtom(id)

POST    /api2/atoms/:id/assets          controllers.Api2.addAsset(id)
DELETE  /api2/atoms/:id/assets          controllers.Api2.deleteAsset(id)
PUT     /api2/atom/:id/asset-active     controllers.Api2.setActiveAsset(id)

POST    /api2/atom/:id/pac-file         controllers.Api2.uploadPacFile(id)

GET     /api2/pluto/commissions         controllers.PlutoController.getCommissions()
GET     /api2/pluto/commissions/:id/projects  controllers.PlutoController.getProjectsByCommissionId(id)
DELETE  /api2/pluto/commissions/:id     controllers.PlutoController.deleteCommission(id)
PUT     /api2/pluto/projects            controllers.PlutoController.upsertProject()
POST    /api2/pluto/resend/:id          controllers.PlutoController.resendAtomMessage(id)

# endpoint used by workflow
OPTIONS /api2/workflow/*url             controllers.Api2.allowCORSAccess(methods = "PUT, POST, DELETE", url: String)
POST    /api2/workflow/atoms            controllers.Api2.createWorkflowMediaAtom

# user uploaded videos
GET     /api2/uploads                   controllers.UploadController.list(atomId)
POST    /api2/uploads                   controllers.UploadController.create
POST    /api2/uploads/:id/credentials   controllers.UploadController.credentials(id, key)

GET     /api/youtube/categories         controllers.Youtube.listCategories()
GET     /api/youtube/channels           controllers.Youtube.listChannels()
GET     /api/youtube/video-info/:id     controllers.Youtube.commercialVideoInfo(id)
GET     /api2/youtube/content-bundle/:id controllers.YoutubeTagController.getById(id)

GET     /api/transcoder/jobStatus       controllers.Transcoder.jobStatus

# reindex
POST    /reindex-preview                com.gu.atom.play.ReindexController.newPreviewReindexJob()
POST    /reindex-publish                com.gu.atom.play.ReindexController.newPublishedReindexJob()
GET     /reindex-preview                com.gu.atom.play.ReindexController.previewReindexJobStatus()
GET     /reindex-publish                com.gu.atom.play.ReindexController.publishedReindexJobStatus()

#video specific react frontend
GET /                                   controllers.VideoUIApp.index(id = "")
GET /videos                             controllers.VideoUIApp.index(id = "")
GET /videos/:id                         controllers.VideoUIApp.index(id)
GET /videos/:id/upload                  controllers.VideoUIApp.index(id)
GET /create                             controllers.VideoUIApp.index(id = "")
GET /help                               controllers.VideoUIApp.index(id = "")
GET /training                           controllers.VideoUIApp.index(id = "")
GET /training/on                        controllers.VideoUIApp.training(inTraining: Boolean ?= true)
GET /training/off                       controllers.VideoUIApp.training(inTraining: Boolean ?= false)

#Support
GET /support/previewCapi/*path          controllers.Support.capiProxy(path: String, queryLive: Boolean ?= false)
GET /support/liveCapi/*path             controllers.Support.capiProxy(path: String, queryLive: Boolean ?= true)


GET   /oauthCallback                    controllers.Login.oauthCallback()
GET   /reauth                           controllers.Login.reauth

GET   /healthcheck                      controllers.Healthcheck.healthcheck()

#static assets
GET  /assets/*file                      controllers.Assets.versioned(path="/public", file: Asset)
