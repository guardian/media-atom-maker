{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "GuardianIP": {
            "Description": "Ip range for the office",
            "Type": "String",
            "Default": "77.91.248.0/21"
        },
        "SSLCertificateId": {
            "Description": "ARN of the SSL certificate",
            "Type": "String"
        },
        "AMI": {
            "Type": "String"
        },
        "Stage": {
            "Type": "String",
            "AllowedValues": [
                "PROD",
                "CODE"
            ]
        },
        "Stack": {
            "Description": "Stack name",
            "Type": "String",
            "Default": "media-service"
        },
        "App": {
            "Description": "App name",
            "Type": "String",
            "Default": "media-atom-maker"
        },
        "KinesisStreamPrefix": {
            "Description": "Kinesis stream name prefix",
            "Type": "String",
            "Default": "content-atom-events"
        },
        "ContentAtomArn": {
            "Description": "ARN of Content Atom kinesis stream Cross Account role",
            "Type": "String"
        },
        "AtomMakerTable": {
            "Description": "Name of the media atom dynamo table",
            "Type": "String"
        },
        "PublishedAtomMakerTable": {
            "Description": "Name of the published media atom dynamo table",
            "Type": "String"
        },
        "AuditTable": {
            "Description": "Name of the audit dynamo table",
            "Type": "String"
        },
        "UploadTrackingTable": {
            "Description": "Name of the upload tracking dynamo table",
            "Type": "String"
        },
        "AlertActive": {
            "Description": "Whether to send CloudWatch alerts",
            "Type": "String"
        },
        "AlertWebhook": {
            "Description": "Where CloudWatch alerts are sent",
            "Type": "String"
        },
        "DomainToMonitor": {
            "Description": "Domain name for the app (Route53 healthcheck and S3 CORS for user upload)",
            "Type": "String"
        },
        "BuildBucket": {
            "Description": "The S3 bucket where builds live",
            "Type": "String"
        },
        "ConfigBucket": {
            "Description": "The S3 bucket where configuration lives",
            "Type": "String"
        },
        "MultimediaAccountId": {
            "Type": "Number",
            "Description": "Account number of multimedia account"
        },
        "UploadParallelism": {
            "Description": "How many video chunks can be uploaded in parallel",
            "Type": "String",
            "Default": "2"
        }
    },
    "Mappings": {
        "StageMap": {
            "PROD": {
                "MinSize": 3,
                "MaxSize": 6,
                "DesiredCapacity": 3,
                "InstanceType": "t2.medium",
                "UploadBucket": "media-atom-maker-upload-prod",
                "TranscoderBucket": "media-atom-maker-transcoder-prod"
            },
            "CODE": {
                "MinSize": 1,
                "MaxSize": 2,
                "DesiredCapacity": 1,
                "InstanceType": "t2.small",
                "UploadBucket": "media-atom-maker-upload-code",
                "TranscoderBucket": "media-atom-maker-transcoder-code"

            }
        },
        "LambdaBuilds": {
            "Uploader": {
                "CODE": "media-service/CODE/media-atom-uploader/media-atom-uploader.zip",
                "PROD": "media-service/PROD/media-atom-uploader/media-atom-uploader.zip"
            },
            "Transcoder": {
              "CODE": "media-service/CODE/media-atom-transcoder/media-atom-transcoder.zip",
              "PROD": "media-service/PROD/media-atom-transcoder/media-atom-transcoder.zip"
            },
            "Expirer": {
              "CODE": "media-service/CODE/media-atom-expirer/media-atom-expirer.zip",
              "PROD": "media-service/PROD/media-atom-expirer/media-atom-expirer.zip"
            }
        },
        "LambdaConfig": {
            "Uploader": {
                "CODE": "CODE/media-atom-maker.private.conf",
                "PROD": "PROD/media-atom-maker.private.conf"
            },
            "Expirer": {
              "CODE": "CODE/media-atom-maker.private.conf",
              "PROD": "PROD/media-atom-maker.private.conf"
            }
        }
    },
    "Resources": {
      "PlutoIntegrationIncomingStream": {
        "Type" : "AWS::Kinesis::Stream",
        "Properties" : {
          "ShardCount" : 1,
          "Tags": [
            { "Key": "Stage", "Value": { "Ref": "Stage" } },
            { "Key": "Stack", "Value": { "Ref": "Stack" } },
            { "Key": "App", "Value": { "Ref": "App" } }
          ]
        }
      },

      "PlutoIntegrationRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
          "AssumeRolePolicyDocument": {
            "Version": "2012-10-17",
            "Statement": {
              "Action": [ "sts:AssumeRole" ],
              "Effect": "Allow",
              "Principal": {
                "AWS": {"Ref": "MultimediaAccountId"}
              }
            }
          },
          "Path": "/",
          "Policies": [{
            "PolicyName": "PlutoIntegrationRolePolicy",
            "PolicyDocument": {
              "Version" : "2012-10-17",
              "Statement": [{
                "Resource": {"Fn::GetAtt": ["PlutoIntegrationIncomingStream", "Arn"]},
                "Effect": "Allow",
                "Action": [
                  "kinesis:PutRecord",
                  "kinesis:PutRecords"
                ]
              }]
            }
          }]
        }
      },
        "MediaMakerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "DistributionRole"
                    }
                ]
            }
        },
        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SSH access from the office",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "GuardianIP"
                        }
                    }
                ]
            }
        },
        "DistributionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::atom-maker-dist/*"
                                    ]
                                },
                                {
                                  "Effect": "Allow",
                                  "Action": [
                                    "s3:GetObject"
                                  ],
                                  "Resource": [
                                    "arn:aws:s3:::atom-maker-conf/*"
                                  ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeTags"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": ["sts:AssumeRole"],
                                    "Resource": [{ "Ref": "ContentAtomArn" }, { "Fn::GetAtt" : ["LimitedUploadRole", "Arn"] }]
                                },
                                {
                                  "Effect": "Allow",
                                  "Action": ["elastictranscoder:ListJobsByPipeline"],
                                  "Resource": [
                                    "arn:aws:elastictranscoder:*"
                                  ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "GetTeamKeysPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "GetTeamKeysPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::github-team-keys/*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Resource": "arn:aws:s3:::github-team-keys"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "DistributionRole"
                    }
                ]
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "application load balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "AppServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Application servers",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupName": {
                            "Ref": "LoadBalancerSecurityGroup"
                        }
                    }
                ]
            }
        },
        "UserUploadBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
                "BucketName": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "UploadBucket"] },
                "CorsConfiguration": {
                    "CorsRules": [{
                        "AllowedHeaders": ["*"],
                        "ExposedHeaders": ["ETag"],
                        "AllowedMethods": ["GET", "PUT", "POST", "DELETE"],
                        "AllowedOrigins": [
                          { "Fn::Join": ["", [ "https://", { "Ref": "DomainToMonitor" } ]] }
                        ]
                    }]
                },
                "NotificationConfiguration": {
                    "LambdaConfigurations": [
                        {
                            "Function": { "Fn::GetAtt": ["UploaderS3EventsLambda", "Arn"] },
                            "Event": "s3:ObjectCreated:*"
                        }
                    ]
                }
            }
        },
        "LimitedUploadRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Principal": {
                            "AWS": { "Fn::Join": ["", [ "arn:aws:iam::", { "Ref": "AWS::AccountId" }, ":root"]] }
                        },
                        "Action": "sts:AssumeRole"
                    }]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "LimitedUploadPolicy",
                        "PolicyDocument": {
                            "Statement": [{
                                "Effect": "Allow",
                                "Action": [
                                  "s3:PutObject",
                                  "s3:PutObjectAcl",
                                  "s3:ListBucketMultipartUploads",
                                  "s3:ListMultipartUploadParts",
                                  "s3:AbortMultipartUpload"
                                ],
                                "Resource": {
                                  "Fn::Sub": [
                                    "arn:aws:s3:::${Bucket}/uploads/*",
                                    { "Bucket": { "Ref": "UserUploadBucket" }}
                                  ]
                                }
                            }]
                        }
                    }
                ]
            }
        },
        "LambdaCloudWatchLoggingPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "LambdaCloudWatchLoggingPolicy",
                "PolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"],
                        "Resource": "*"
                    }]
                },
                "Roles": [
                    { "Ref": "UploaderRole" }
                ]
            }
        },
        "UploaderRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [{
                        "Effect": "Allow",
                        "Action": "sts:AssumeRole",
                        "Principal": { "Service": ["lambda.amazonaws.com"] }
                    }]
                },
                "Path": "/",
                "Policies": [{
                    "PolicyName": "UploaderPolicy",
                    "PolicyDocument": {
                        "Statement": [
                          {
                            "Effect": "Allow",
                            "Action": ["s3:GetObject"],
                            "Resource": [
                              { "Fn::Sub": [
                                "arn:aws:s3:::${Bucket}/${Key}",
                                { "Bucket": { "Ref": "BuildBucket" }, "Key": { "Fn::FindInMap": [ "LambdaBuilds", "Uploader", { "Ref": "Stage" }] } }
                              ]},
                              { "Fn::Sub": [
                                "arn:aws:s3:::${Bucket}/${Key}",
                                { "Bucket": { "Ref": "ConfigBucket" }, "Key": { "Fn::FindInMap": [ "LambdaConfig", "Uploader", { "Ref": "Stage" }] } }
                              ]}
                            ]
                          },
                          {
                            "Effect": "Allow",
                            "Action": ["dynamodb:*"],
                            "Resource": {
                              "Fn::Sub": [
                                "arn:aws:dynamodb:${Region}:${Account}:table/${Table}",
                                { "Region": { "Ref": "AWS::Region"}, "Account": { "Ref": "AWS::AccountId" }, "Table": { "Ref": "UploadTrackingTable" } }
                              ]
                            }
                          },
                          {
                            "Effect": "Allow",
                            "Action": ["s3:GetObject"],
                            "Resource": [
                              { "Fn::Sub": [
                                "arn:aws:s3:::${Bucket}/*",
                                { "Bucket": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "UploadBucket"] } }
                              ]}
                            ]
                          },
                          {
                            "Effect": "Allow",
                            "Action": ["kinesis:Get*", "kinesis:PutRecord", "kinesis:DescribeStream"],
                            "Resource": { "Fn::GetAtt": ["YouTubeUploadsStream", "Arn"] }
                          }
                        ]
                    }
                }]
            }
        },
        "UploaderS3EventsLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName":  {"Fn::Join": ["-", ["media-atom-maker-uploader-s3-events", {"Ref": "Stage"} ] ] },
                "Description": "Updates upload progress based on S3 events",
                "Handler": "com.gu.media.S3EventsLambda::handleRequest",
                "Code": {
                    "S3Bucket": { "Ref": "BuildBucket" },
                    "S3Key": { "Fn::FindInMap": [ "LambdaBuilds", "Uploader", { "Ref": "Stage" }] }
                },
                "Environment": {
                    "Variables": {
                        "REGION": { "Ref": "AWS::Region" },
                        "STACK": { "Ref": "Stack" },
                        "APP": "media-atom-uploader",
                        "STAGE": { "Ref": "Stage" },
                        "CONFIG_BUCKET": { "Ref": "ConfigBucket" },
                        "CONFIG_KEY": { "Fn::FindInMap": [ "LambdaConfig", "Uploader", { "Ref": "Stage" }] }
                    }
                },
                "MemorySize": 256,
                "Role":  { "Fn::GetAtt": [ "UploaderRole", "Arn" ] },
                "Runtime": "java8",
                "Timeout": 300
            }
        },

        "UploaderS3EventsPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:InvokeFunction",
            "FunctionName": { "Ref": "UploaderS3EventsLambda" },
            "Principal": "s3.amazonaws.com",
            "SourceArn": { "Fn::Join": ["", [ "arn:aws:s3:::", { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "UploadBucket"] } ]] }
          }
        },

        "YouTubeUploadsStream": {
          "Type": "AWS::Kinesis::Stream",
          "Properties": {
            "ShardCount": { "Ref": "UploadParallelism" }
          }
        },

        "YouTubeUploadsLambda": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "FunctionName":  {"Fn::Join": ["-", ["media-atom-maker-uploader-youtube", {"Ref": "Stage"} ] ] },
            "Description": "Uploads chunks of video to YouTube",
            "Handler": "com.gu.media.YouTubeUploadLambda::handleRequest",
            "Code": {
              "S3Bucket": { "Ref": "BuildBucket" },
              "S3Key": { "Fn::FindInMap": [ "LambdaBuilds", "Uploader", { "Ref": "Stage" }] }
            },
            "Environment": {
              "Variables": {
                "REGION": { "Ref": "AWS::Region" },
                "STACK": { "Ref": "Stack" },
                "APP": "media-atom-uploader",
                "STAGE": { "Ref": "Stage" },
                "CONFIG_BUCKET": { "Ref": "ConfigBucket" },
                "CONFIG_KEY": { "Fn::FindInMap": [ "LambdaConfig", "Uploader", { "Ref": "Stage" }] }
              }
            },
            "MemorySize": 256,
            "Role":  { "Fn::GetAtt": [ "UploaderRole", "Arn" ] },
            "Runtime": "java8",
            "Timeout": 300
          }
        },

        "YouTubeEventSourceMapping": {
          "Type": "AWS::Lambda::EventSourceMapping",
          "Properties": {
            "EventSourceArn": { "Fn::GetAtt": ["YouTubeUploadsStream", "Arn"] },
            "FunctionName": { "Fn::GetAtt": ["YouTubeUploadLambda", "Arn"] },
            "BatchSize": 1,
            "StartingPosition": "TRIM_HORIZON"
          }
        },

        "TranscoderOutputS3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "TranscoderBucket"]}
          }
        },
        "TranscoderRole" : {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "sts:AssumeRole",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  }
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "TranscoderPolicy",
                "PolicyDocument": {
                      "Statement": [{
                          "Effect": "Allow",
                          "Action": [
                            "elastictranscoder:CreateJob"
                          ],
                          "Resource": [
                            "arn:aws:elastictranscoder:*"
                          ]
                        }]
                    }
                }]
          }
        },

        "TranscoderLambda": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Description": "Transcodes masters to mp4s",
            "FunctionName":  {"Fn::Join": ["-", ["media-atom-maker-transcoder", {"Ref": "Stage"} ] ] },
            "Handler": "com.gu.media.TranscoderLambda::handleRequest",
            "Code": {
              "S3Bucket": { "Ref": "BuildBucket" },
              "S3Key": { "Fn::FindInMap": [ "LambdaBuilds", "Transcoder", { "Ref": "Stage" }] }
            },
            "Environment": {
              "Variables": {
                "REGION": { "Ref": "AWS::Region" },
                "STACK": { "Ref": "Stack" },
                "APP": "media-atom-transcoder",
                "STAGE": { "Ref": "Stage" }
              }
            },
            "MemorySize": 256,
            "Role":  { "Fn::GetAtt": [ "TranscoderRole", "Arn" ] },
            "Runtime": "java8",
            "Timeout": 300
          }
        },

        "ExpirerRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [{
                "Effect": "Allow",
                "Action": "sts:AssumeRole",
                "Principal": {
                  "Service": ["lambda.amazonaws.com"]
                }
              }]
            },
            "Path": "/",
            "Policies": [{
              "PolicyName": "ExpirerPolicy",
              "PolicyDocument": {
                "Statement": [{
                  "Effect": "Allow",
                  "Action": ["s3:GetObject"],
                  "Resource": [
                    { "Fn::Sub": [ "arn:aws:s3:::${Bucket}/${Key}",
                      { "Bucket": { "Ref": "BuildBucket" }, "Key": { "Fn::FindInMap": ["LambdaBuilds", "Expirer", { "Ref": "Stage"}] } }
                    ]},
                    { "Fn::Sub": [ "arn:aws:s3:::${Bucket}/${Key}",
                      { "Bucket": { "Ref": "ConfigBucket" }, "Key": { "Fn::FindInMap": ["LambdaConfig", "Expirer", { "Ref": "Stage"}] } }
                    ]}
                  ]
                }]
              }
            }]
          }
        },

        "ExpirerLambda": {
          "Type": "AWS::Lambda::Function",
          "Properties": {
            "Description": "Expires atoms",
            "FunctionName":  {"Fn::Join": ["-", ["media-atom-maker-expirer", {"Ref": "Stage"} ] ] },
            "Handler": "com.gu.media.expirer.ExpirerLambda::handleRequest",
            "Code": {
              "S3Bucket": { "Ref": "BuildBucket" },
              "S3Key": { "Fn::FindInMap": ["LambdaBuilds", "Expirer", { "Ref": "Stage" }] }
            },
            "Environment": {
              "Variables": {
                "REGION": { "Ref": "AWS::Region" },
                "STACK": { "Ref": "Stack" },
                "APP": "media-atom-expirer",
                "STAGE": { "Ref": "Stage" },
                "CONFIG_BUCKET": { "Ref": "ConfigBucket" },
                "CONFIG_KEY": { "Fn::FindInMap": [ "LambdaConfig", "Expirer", { "Ref": "Stage" }] }
              }
            },
            "MemorySize": 256,
            "Role": { "Fn::GetAtt": ["UploaderRole", "Arn"] },
            "Runtime": "java8",
            "Timeout": 300
          }
        },

        "ExpirerLambdaTrigger": {
          "Type": "AWS::Events::Rule",
          "Properties": {
            "ScheduleExpression": "cron(0/15 * * * ? *)",
            "Targets": [{
              "Arn": { "Fn::GetAtt": ["ExpirerLambda", "Arn"] },
              "Id": "ExpirerLambda"
            }]
          }
        },

        "ExpirerLambdaPermission": {
          "Type": "AWS::Lambda::Permission",
          "Properties": {
            "Action": "lambda:InvokeFunction",
            "FunctionName": { "Ref": "ExpirerLambda" },
            "Principal": "events.amazonaws.com",
            "SourceArn": { "Fn::GetAtt": ["ExpirerLambdaTrigger", "Arn"] }
          }
        },

        "MediaAtomMakerLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": true,
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "LoadBalancerSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "30",
                    "Target": "HTTP:9000/healthcheck",
                    "Timeout": "5",
                    "UnhealthyThreshold": "2"
                },
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "9000",
                        "Protocol": "HTTP"
                    },
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "9000",
                        "Protocol": "HTTPS",
                        "SSLCertificateId": {
                            "Ref": "SSLCertificateId"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": {
                            "Ref": "Stage"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Ref": "Stack"
                        }
                    },
                    {
                        "Key": "App",
                        "Value": {
                            "Ref": "App"
                        }
                    }
                ]
            }
        },
        "MediaAtomLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Ref": "AMI"
                },
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "AppServerSecurityGroup",
                            "GroupId"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "SSHSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "InstanceType": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "InstanceType"]},
                "IamInstanceProfile": {
                    "Ref": "MediaMakerInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ev\n",

                                "aws s3 cp 's3://atom-maker-conf/", { "Ref": "Stage"},"/media-atom-maker.private.conf' /tmp\n",

                                "cat >> /tmp/media-atom-maker.private.conf<<'EOF'\n",
                                "aws.dynamo.tableName=", { "Ref": "AtomMakerTable" }, "\n",
                                "aws.dynamo.publishedTableName=", { "Ref": "PublishedAtomMakerTable" }, "\n",
                                "aws.dynamo.auditTableName=", { "Ref": "AuditTable" }, "\n",
                                "aws.dynamo.uploadTrackingTableName=", { "Ref": "UploadTrackingTable" }, "\n",
                                "EOF\n",

                                "mkdir /etc/gu\n",
                                "mv /tmp/media-atom-maker.private.conf /etc/gu\n",

                                "aws s3 cp s3://atom-maker-dist/media-service/", {"Ref":"Stage"}, "/media-atom-maker/media-atom-maker.deb /tmp\n",
                                "dpkg -i /tmp/media-atom-maker.deb\n",

                                "chown ", {"Ref": "App"},  " /etc/gu/media-atom-maker.private.conf\n",
                                "chmod 0600 /etc/gu/media-atom-maker.private.conf\n"

                            ]
                        ]
                    }
                }
            }
        },
        "MediaAtomAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    "eu-west-1c",
                    "eu-west-1a",
                    "eu-west-1b"
                ],
                "LaunchConfigurationName": {
                    "Ref": "MediaAtomLaunchConfig"
                },
                "MinSize": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "MinSize"]},
                "MaxSize": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "MaxSize"]},
                "DesiredCapacity": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "DesiredCapacity"]},
                "Cooldown": "180",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [
                    {
                        "Ref": "MediaAtomMakerLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": {
                            "Ref": "Stage"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Ref": "Stack"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": {
                            "Ref": "App"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "DynamoDBTablePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "MediaAtomMakerDynamoDBPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [ "dynamodb:*" ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "AtomMakerTable"} ] ]
                            }
                        },
                        {
                            "Action": [ "dynamodb:*" ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "PublishedAtomMakerTable"} ] ]
                            }
                        },
                        {
                            "Action": [ "dynamodb:*" ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "AuditTable"} ] ]
                            }
                        },
                        {
                            "Action": [ "dynamodb:*" ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "UploadTrackingTable"} ] ]
                            }
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "DistributionRole"
                    }
                ]
            }
        },
        "PanDomainPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PanDomainPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": ["s3:GetObject"],
                            "Resource": ["arn:aws:s3:::pan-domain-auth-settings/*"]
                        }
                    ]
                },
                "Roles": [{"Ref": "DistributionRole"}]
            }
        },
        "AlertTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": { "Fn::Join" : [ "-", [ { "Ref": "Stage" },"Alerts"]] },
                "Subscription": [{
                  "Endpoint": { "Ref": "AlertWebhook" },
                  "Protocol": "https"
                }]
            }
        },
        "MediaAtomMaker5XXAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": { "Ref": "AlertActive" },
                "AlarmDescription": "500 Error reported from media-atom-maker",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "Threshold": "1",
                "Namespace": "AWS/ELB",
                "MetricName": "HTTPCode_Backend_5XX",
                "Dimensions": [
                    {
                      "Name": "LoadBalancerName",
                      "Value": { "Ref": "MediaAtomMakerLoadBalancer" }
                    }
                ],
                "Period": "300",
                "EvaluationPeriods": "1",
                "Statistic": "Sum",
                "AlarmActions": [ { "Ref": "AlertTopic" } ]
            }
        },
        "MediaAtomMakerLatency": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": { "Ref": "AlertActive" },
                "AlarmDescription": "Requests to media-atom-maker start taking on average more than 3 seconds",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "Threshold": "3",
                "Namespace": "AWS/ELB",
                "MetricName": "Latency",
                "Dimensions": [
                    {
                      "Name": "LoadBalancerName",
                      "Value": { "Ref": "MediaAtomMakerLoadBalancer" }
                    }
                ],
                "Period": "300",
                "EvaluationPeriods": "2",
                "Statistic": "Average",
                "AlarmActions": [ { "Ref": "AlertTopic" } ]
            }
        },
        "MediaAtomMakerPingVideos": {
            "Type": "AWS::Route53::HealthCheck",
            "Properties": {
                "HealthCheckConfig": {
                    "Port": 443,
                    "Type": "HTTPS",
                    "FullyQualifiedDomainName": { "Ref": "DomainToMonitor" },
                    "ResourcePath": "/video/videos",
                    "RequestInterval": "30",
                    "FailureThreshold": "3"
                },
                "HealthCheckTags": [
                    {
                        "Key": "Name",
                        "Value": { "Fn::Join": [ "", [ "https://", { "Ref": "DomainToMonitor" }, "/video/videos" ] ] }
                    }
                ]
            }
        },
        "MediaAtomMakerVideosDown": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": { "Ref": "AlertActive" },
                "AlarmDescription": "Unable to get a response from the videos application",
                "ComparisonOperator": "LessThanThreshold",
                "Threshold": "1",
                "Namespace": "AWS/Route53",
                "MetricName": "HealthCheckStatus",
                "Dimensions": [
                    {
                      "Name": "HealthCheckId",
                      "Value": { "Ref": "MediaAtomMakerPingVideos" }
                    }
                ],
                "Period": "60",
                "EvaluationPeriods": "1",
                "Statistic": "Minimum",
                "AlarmActions": [ { "Ref": "AlertTopic" } ]
            }
        }
    },

    "Outputs": {
        "UserUploadRole": {
          "Value": { "Ref": "LimitedUploadRole" }
        },
        "TranscoderPipelineName": {
          "Value": {"Fn::Join": ["-", ["media-atom-maker-transcoder", {"Ref": "Stage"} ] ] }
        }
    }
}
