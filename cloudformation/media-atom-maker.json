{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
        "GuardianIP": {
            "Description": "Ip range for the office",
            "Type": "String",
            "Default": "77.91.248.0/21"
        },
        "SSLCertificateId": {
            "Description": "ARN of the SSL certificate",
            "Type": "String"
        },
        "AMI": {
            "Type": "String"
        },
        "Stage": {
            "Type": "String",
            "AllowedValues": [
                "PROD",
                "CODE"
            ]
        },
        "Stack": {
            "Description": "Stack name",
            "Type": "String",
            "Default": "media-service"
        },
        "App": {
            "Description": "App name",
            "Type": "String",
            "Default": "media-atom-maker"
        },
        "GithubTeamName": {
            "Description": "Github team name, used for giving ssh access to members of the team.",
            "Type": "String",
            "Default": "Editorial-Tools-SSHAccess"
        },
        "KinesisStreamPrefix": {
            "Description": "Kinesis stream name prefix",
            "Type": "String",
            "Default": "content-atom-events"
        },
        "ContentAtomArn": {
            "Description": "ARN of Content Atom kinesis stream Cross Account role",
            "Type": "String"
        },
        "AtomMakerTable": {
            "Description": "Name of the media atom dynamo table",
            "Type": "String"
        },
        "PublishedAtomMakerTable": {
            "Description": "Name of the published media atom dynamo table",
            "Type": "String"
        },
        "AuditTable": {
            "Description": "Name of the audit dynamo table",
            "Type": "String"
        },
        "AlertActive": {
            "Description": "Whether to send CloudWatch alerts",
            "Type": "String"
        },
        "AlertWebhook": {
            "Description": "Where CloudWatch alerts are sent",
            "Type": "String"
        }
    },
    "Mappings": {
        "StageMap": {
            "PROD": {
                "MinSize": 3,
                "MaxSize": 6,
                "DesiredCapacity": 3,
                "InstanceType": "t2.medium"
            },
            "CODE": {
                "MinSize": 1,
                "MaxSize": 2,
                "DesiredCapacity": 1,
                "InstanceType": "t2.small"
            }
        }
    },

    "Resources": {
        "MediaMakerInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "DistributionRole"
                    }
                ]
            }
        },
        "SSHSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow SSH access from the office",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "GuardianIP"
                        }
                    }
                ]
            }
        },
        "DistributionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject"
                                    ],
                                    "Resource": [
                                        "arn:aws:s3:::atom-maker-dist/*"
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "ec2:DescribeTags"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": ["sts:AssumeRole"],
                                    "Resource": { "Ref": "ContentAtomArn" }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "GetTeamKeysPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "GetTeamKeysPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Resource": [
                                "arn:aws:s3:::github-team-keys/*"
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket"
                            ],
                            "Resource": "arn:aws:s3:::github-team-keys"
                        }
                    ]
                },
                "Roles": [
                    {
                        "Ref": "DistributionRole"
                    }
                ]
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "application load balancer",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "443",
                        "ToPort": "443",
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "AppServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Application servers",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 9000,
                        "ToPort": 9000,
                        "SourceSecurityGroupName": {
                            "Ref": "LoadBalancerSecurityGroup"
                        }
                    }
                ]
            }
        },
        "MediaAtomMakerLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "CrossZone": true,
                "AvailabilityZones": {
                    "Fn::GetAZs": ""
                },
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "LoadBalancerSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "HealthCheck": {
                    "HealthyThreshold": "2",
                    "Interval": "30",
                    "Target": "HTTP:9000/healthcheck",
                    "Timeout": "5",
                    "UnhealthyThreshold": "2"
                },
                "Listeners": [
                    {
                        "LoadBalancerPort": "80",
                        "InstancePort": "9000",
                        "Protocol": "HTTP"
                    },
                    {
                        "LoadBalancerPort": "443",
                        "InstancePort": "9000",
                        "Protocol": "HTTPS",
                        "SSLCertificateId": {
                            "Ref": "SSLCertificateId"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": {
                            "Ref": "Stage"
                        }
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Ref": "Stack"
                        }
                    },
                    {
                        "Key": "App",
                        "Value": {
                            "Ref": "App"
                        }
                    }
                ]
            }
        },
        "MediaAtomLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Properties": {
                "ImageId": {
                    "Ref": "AMI"
                },
                "SecurityGroups": [
                    {
                        "Fn::GetAtt": [
                            "AppServerSecurityGroup",
                            "GroupId"
                        ]
                    },
                    {
                        "Fn::GetAtt": [
                            "SSHSecurityGroup",
                            "GroupId"
                        ]
                    }
                ],
                "InstanceType": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "InstanceType"]},
                "IamInstanceProfile": {
                    "Ref": "MediaMakerInstanceProfile"
                },
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -ev\n",
                                "apt-get -y update\n",
                                "apt-get -y upgrade\n",
                                "/opt/features/native-packager/install.sh -b atom-maker-dist -a media-atom-maker -t tgz\n",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "/opt/features/ssh-keys/initialise-keys-and-cron-job.sh -l -b github-team-keys -t ",
                                            {
                                                "Ref": "GithubTeamName"
                                            },
                                            " || true\n"
                                        ]
                                    ]
                                },
                                "aws s3 cp 's3://atom-maker-dist/conf/media-atom-maker.",
                                {
                                    "Ref": "Stage"
                                },
                                ".application.conf' ",
                                "/home/media-service/media-atom-maker/conf/application.conf\n",
                                "cat >> /home/media-service/media-atom-maker/conf/application.conf<<'EOF'\n",
                                "aws.dynamo.tableName=", { "Ref": "AtomMakerTable" }, "\n",
                                "aws.dynamo.publishedTableName=", { "Ref": "PublishedAtomMakerTable" }, "\n",
                                "aws.dynamo.auditTableName=", { "Ref": "AuditTable" }, "\n",
                                "EOF\n",

                                "systemctl start media-atom-maker\n"
                            ]
                        ]
                    }
                }
            }
        },
        "MediaAtomAutoscalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AvailabilityZones": [
                    "eu-west-1c",
                    "eu-west-1a",
                    "eu-west-1b"
                ],
                "LaunchConfigurationName": {
                    "Ref": "MediaAtomLaunchConfig"
                },
                "MinSize": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "MinSize"]},
                "MaxSize": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "MaxSize"]},
                "DesiredCapacity": { "Fn::FindInMap": [ "StageMap", {"Ref": "Stage"}, "DesiredCapacity"]},
                "Cooldown": "180",
                "HealthCheckType": "ELB",
                "HealthCheckGracePeriod": 300,
                "LoadBalancerNames": [
                    {
                        "Ref": "MediaAtomMakerLoadBalancer"
                    }
                ],
                "Tags": [
                    {
                        "Key": "Stage",
                        "Value": {
                            "Ref": "Stage"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "Stack",
                        "Value": {
                            "Ref": "Stack"
                        },
                        "PropagateAtLaunch": "true"
                    },
                    {
                        "Key": "App",
                        "Value": {
                            "Ref": "App"
                        },
                        "PropagateAtLaunch": "true"
                    }
                ]
            }
        },
        "DynamoDBTablePolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "MediaAtomMakerDynamoDBPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Action": [ "dynamodb:*" ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "AtomMakerTable"} ] ]
                            }
                        },
                        {
                            "Action": [ "dynamodb:*" ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "PublishedAtomMakerTable"} ] ]
                            }
                        },
                        {
                            "Action": [ "dynamodb:*" ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/", {"Ref": "AuditTable"} ] ]
                            }
                        }

                    ]
                },
                "Roles": [
                    {
                        "Ref": "DistributionRole"
                    }
                ]
            }
        },
        "PanDomainPolicy": {
            "Type": "AWS::IAM::Policy",
            "Properties": {
                "PolicyName": "PanDomainPolicy",
                "PolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": ["s3:GetObject"],
                            "Resource": ["arn:aws:s3:::pan-domain-auth-settings/*"]
                        }
                    ]
                },
                "Roles": [{"Ref": "DistributionRole"}]
            }
        },
        "AlertTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "DisplayName": { "Fn::Join" : [ "-", [ { "Ref": "Stage" },"Alerts"]] },
                "Subscription": [{
                  "Endpoint": { "Ref": "AlertWebhook" },
                  "Protocol": "https"
                }]
            }
        },
        "MediaAtomMaker5XXAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": { "Ref": "AlertActive" },
                "AlarmDescription": "500 Error reported from media-atom-maker",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "Threshold": "1",
                "Namespace": "AWS/ELB",
                "MetricName": "HTTPCode_Backend_5XX",
                "Dimensions": [
                    {
                      "Name": "LoadBalancerName",
                      "Value": { "Ref": "MediaAtomMakerLoadBalancer" }
                    }
                ],
                "Period": "300",
                "EvaluationPeriods": "1",
                "Statistic": "Sum",
                "AlarmActions": [ { "Ref": "AlertTopic" } ]
            }
        },
        "MediaAtomMaker4XXAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": { "Ref": "AlertActive" },
                "AlarmDescription": "Repeated 4XX errors reported from media-atom-maker",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "Threshold": "15",
                "Namespace": "AWS/ELB",
                "MetricName": "HTTPCode_Backend_4XX",
                "Dimensions": [
                    {
                      "Name": "LoadBalancerName",
                      "Value": { "Ref": "MediaAtomMakerLoadBalancer" }
                    }
                ],
                "Period": "300",
                "EvaluationPeriods": "2",
                "Statistic": "Sum",
                "AlarmActions": [ { "Ref": "AlertTopic" } ]
            }
        },
        "MediaAtomMakerLatency": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "ActionsEnabled": { "Ref": "AlertActive" },
                "AlarmDescription": "Requests to media-atom-maker start taking on average more than 1 second",
                "ComparisonOperator": "GreaterThanOrEqualToThreshold",
                "Threshold": "1",
                "Namespace": "AWS/ELB",
                "MetricName": "Latency",
                "Dimensions": [
                    {
                      "Name": "LoadBalancerName",
                      "Value": { "Ref": "MediaAtomMakerLoadBalancer" }
                    }
                ],
                "Period": "300",
                "EvaluationPeriods": "1",
                "Statistic": "Average",
                "AlarmActions": [ { "Ref": "AlertTopic" } ]
            }
        },
        "MediaAtomMakerUnhealthy": {
          "Type": "AWS::CloudWatch::Alarm",
          "Properties": {
            "ActionsEnabled": { "Ref": "AlertActive" },
            "AlarmDescription": "Unexpectedly unhealthy instances",
            "ComparisonOperator": "GreaterThanOrEqualToThreshold",
            "Threshold": "1",
            "Namespace": "AWS/ELB",
            "MetricName": "UnHealthyHostCount",
            "Dimensions": [
              {
                "Name": "LoadBalancerName",
                "Value": { "Ref": "MediaAtomMakerLoadBalancer" }
              }
            ],
            "Period": "300",
            "EvaluationPeriods": "1",
            "Statistic": "Average",
            "AlarmActions": [ { "Ref": "AlertTopic" } ]
          }
        }
    }
}
