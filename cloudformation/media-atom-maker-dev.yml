AWSTemplateFormatVersion: '2010-09-09'
Description: "Media atom maker development"
Parameters:
  Domain:
    Description: "The domain name where the app is running"
    Type: "String"
  BuildBucket:
    Description: "The S3 bucket where builds live"
    Type: "String"
  ConfigBucket:
    Description: "The S3 bucket where configuration lives"
    Type: "String"
  Stack:
    Description: "Stack name"
    Type: "String"
    Default: "media-service"
  Stage:
    Description: "Stage name"
    Type: "String"
    Default: "DEV"
Mappings:
  LambdaBuilds:
    Uploader:
      DEV: "media-service/DEV/media-atom-uploader/media-atom-uploader.zip"
  LambdaConfig:
    Uploader:
      DEV: "DEV/media-atom-maker.private.conf"
Resources:
  MediaAtomGroup:
    Type: "AWS::IAM::Group"
    Properties:
      Policies:
        - PolicyName:   "Group-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ["dynamodb:*"]
                Resource:
                  - Fn::Join:
                    - ""
                    - ["arn:aws:dynamodb:", {Ref: "AWS::Region"}, ":", {Ref: "AWS::AccountId"}, ":table/", {Ref: "MediaAtomsDynamoTable"}]
              - Effect: "Allow"
                Action: ["dynamodb:*"]
                Resource:
                  - Fn::Join:
                    - ""
                    - ["arn:aws:dynamodb:", {Ref: "AWS::Region"}, ":", {Ref: "AWS::AccountId"}, ":table/", {Ref: "PublishedMediaAtomsDynamoTable"}]
  MediaAtomUser:
    Type: "AWS::IAM::User"
    Properties:
      Path: "/"
      Groups: [{ "Ref": "MediaAtomGroup" }]
  HostKeys:
    Type: "AWS::IAM::AccessKey"
    Properties:
      UserName: {"Ref": "MediaAtomUser"}
      Serial: 2
  MediaAtomsDynamoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "5"
  PublishedMediaAtomsDynamoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "5"
  AuditMediaAtomMakerDynamoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "atomId"
          AttributeType: "S"
        - AttributeName: "operation"
          AttributeType: "S"
        - AttributeName: "date"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "atomId"
          KeyType: "HASH"
        - AttributeName: "date"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes:
        -
          IndexName: "operation-date-index"
          KeySchema:
            -
              AttributeName: "operation"
              KeyType: "HASH"
            -
              AttributeName: "date"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"
  UserUploadBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      CorsConfiguration:
        CorsRules:
          -
            AllowedHeaders:
              - "*"
            ExposedHeaders:
              - "ETag"
            AllowedMethods:
              - "GET"
              - "PUT"
              - "POST"
              - "DELETE" # to clean up failed multipart uploads
            AllowedOrigins:
              -
                !Join [ "", [ "https://", { "Ref": "Domain"} ]]
  LimitedUploadRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS:
                !GetAtt MediaAtomUser.Arn
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      Policies:
        -
          PolicyName: "LimitedUploadPolicy"
          PolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:ListMultipartUploadParts"
                  - "s3:AbortMultipartUpload"
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/uploads/*"
                    - { Bucket: !Ref "UserUploadBucket" }
  LambdaCloudWatchLoggingPolicy:
    # This is just for start-up logging, everything else goes through kinesis as normal
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "LambdaCloudWatchLoggingPolicy"
      PolicyDocument:
        Statement:
          Effect: "Allow"
          Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
          Resource: "*"
      Roles:
        - !Ref UploaderRole
  UploaderRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: ["lambda.amazonaws.com"]
      Path: "/"
      Policies:
        - PolicyName: "UploaderPolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: ["s3:GetObject"]
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/${Key}"
                    - { "Bucket": !Ref BuildBucket, "Key": !FindInMap [LambdaBuilds, Uploader, DEV] }
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/${Key}"
                    - { "Bucket": !Ref ConfigBucket, "Key": !FindInMap [LambdaConfig, Uploader, DEV] }
  UploaderLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Uploads videos to YouTube"
      Handler: "com.gu.media.UploaderLambda::handleRequest"
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: !FindInMap [LambdaBuilds, Uploader, DEV]
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          STACK: !Ref Stack
          APP: "media-atom-uploader"
          STAGE: !Ref Stage
          CONFIG_BUCKET: !Ref ConfigBucket
          CONFIG_KEY: !FindInMap [LambdaConfig, Uploader, DEV]
      MemorySize: 256
      Role: !GetAtt UploaderRole.Arn
      Runtime: "java8"
      Timeout: 300

  TranscoderOutputS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: "media-atom-maker-transcoder-dev"

  TranscoderRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: ["lambda.amazonaws.com"]
      Path: "/"
      Policies:
        - PolicyName: "TranscoderPolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: ["elastictranscoder:CreateJob"]
                Resource: ["arn:aws:elastictranscoder:*"]

  TranscoderLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Transcoders masters to mp4s"
      Handler: "com.gu.media.Lambda::handleRequest"
      Code:
        S3Bucket: "atom-maker-dist"
        S3Key: "transcoder-test/media-atom-transcoder-assembly-0.1.3-SNAPSHOT.jar"
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          STACK: !Ref Stack
          APP: "media-atom-transcoder"
          STAGE: !Ref Stage
      MemorySize: 256
      Role: !GetAtt TranscoderRole.Arn
      Runtime: "java8"
      Timeout: 300

Outputs:
  EditsDynamoTable:
    Value:
      Ref: "MediaAtomsDynamoTable"
  PublishedDynamoTable:
    Value:
      Ref: "PublishedMediaAtomsDynamoTable"
  AuditsDynamoTable:
    Value:
      Ref: "AuditMediaAtomMakerDynamoTable"
  AwsId:
    Value:
      Ref: "HostKeys"
  AwsSecret:
    Value:
      Fn::GetAtt: ["HostKeys", "SecretAccessKey"]
  UserUploadBucket:
    Value:
      Ref: "UserUploadBucket"
  UploadRole:
    Value:
      Ref: "LimitedUploadRole"
  TranscoderOutputS3Bucket:
    Value:
      Ref: "TranscoderOutputS3Bucket"
