AWSTemplateFormatVersion: '2010-09-09'
Description: "Media atom maker development"
Parameters:
  Domain:
    Description: "The domain name where the app is running"
    Type: "String"
  BuildBucket:
    Description: "The S3 bucket where builds live"
    Type: "String"
  ConfigBucket:
    Description: "The S3 bucket where configuration lives"
    Type: "String"
  Stack:
    Description: "Stack name"
    Type: "String"
    Default: "media-service"
  Stage:
    Description: "Stage name"
    Type: "String"
    Default: "DEV"
  TranscodeOutputBucketName:
    Description: "The name to use for the S3 bucket for transcoding output"
    Type: "String"
    Default: "media-atom-maker-transcoder-dev"
  UploadBucketName:
    Description: "The name to use for the S3 bucket where uploads will be saved"
    Type: "String"
    Default: "media-atom-maker-upload-dev"
  MultimediaAccountId:
    Type: "Number"
    Description: "Account number of multimedia account"
Mappings:
  LambdaBuilds:
    Uploader:
      DEV: "media-service/DEV/media-atom-uploader/media-atom-uploader.zip"
    Transcoder:
      DEV: "media-service/DEV/media-atom-transcoder/media-atom-transcoder.zip"
    Expirer:
      DEV: "media-service/DEV/media-atom-expirer/media-atom-expirer.zip"
  LambdaConfig:
    Uploader:
      DEV: "DEV/media-atom-maker.private.conf"
    Expirer:
      DEV: "DEV/media-atom-maker.private.conf"
Resources:
  MediaAtomGroup:
    Type: "AWS::IAM::Group"
    Properties:
      Policies:
        - PolicyName:   "Group-Policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action: ["dynamodb:*"]
                Resource:
                  - !Sub
                    - "arn:aws:dynamodb:${Region}:${Account}:table/${Table}"
                    - { Region: !Ref "AWS::Region", Account: !Ref "AWS::AccountId", Table: !Ref "MediaAtomsDynamoTable" }
                  - !Sub
                    - "arn:aws:dynamodb:${Region}:${Account}:table/${Table}"
                    - { Region: !Ref "AWS::Region", Account: !Ref "AWS::AccountId", Table: !Ref "PublishedMediaAtomsDynamoTable" }
                  - !Sub
                    - "arn:aws:dynamodb:${Region}:${Account}:table/${Table}"
                    - { Region: !Ref "AWS::Region", Account: !Ref "AWS::AccountId", Table: !Ref "UploadTrackingDynamoTable" }
  MediaAtomUser:
    Type: "AWS::IAM::User"
    Properties:
      Path: "/"
      Groups: [{ "Ref": "MediaAtomGroup" }]
  HostKeys:
    Type: "AWS::IAM::AccessKey"
    Properties:
      UserName: {"Ref": "MediaAtomUser"}
      Serial: 2
  MediaAtomsDynamoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "5"
  PublishedMediaAtomsDynamoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "10"
        WriteCapacityUnits: "5"
  AuditMediaAtomMakerDynamoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "atomId"
          AttributeType: "S"
        - AttributeName: "operation"
          AttributeType: "S"
        - AttributeName: "date"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "atomId"
          KeyType: "HASH"
        - AttributeName: "date"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"
      GlobalSecondaryIndexes:
        -
          IndexName: "operation-date-index"
          KeySchema:
            -
              AttributeName: "operation"
              KeyType: "HASH"
            -
              AttributeName: "date"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: "5"
            WriteCapacityUnits: "5"

  UploadTrackingDynamoTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  UserUploadBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref UploadBucketName
      CorsConfiguration:
        CorsRules:
          -
            AllowedHeaders:
              - "*"
            ExposedHeaders:
              - "ETag"
            AllowedMethods:
              - "GET"
              - "PUT"
              - "POST"
              - "DELETE" # to clean up failed multipart uploads
            AllowedOrigins:
              -
                !Join [ "", [ "https://", { "Ref": "Domain"} ]]
      NotificationConfiguration:
        LambdaConfigurations:
          - Function: !GetAtt UploaderS3EventsLambda.Arn
            Event: "s3:ObjectCreated:*"

  LimitedUploadRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          -
            Effect: "Allow"
            Principal:
              AWS:
                !GetAtt MediaAtomUser.Arn
            Action: [ "sts:AssumeRole" ]
      Path: "/"
      Policies:
        -
          PolicyName: "LimitedUploadPolicy"
          PolicyDocument:
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:ListMultipartUploadParts"
                  - "s3:AbortMultipartUpload"
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/uploads/*"
                    - { Bucket: !Ref "UserUploadBucket" }

  LambdaCloudWatchLoggingPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "LambdaCloudWatchLoggingPolicy"
      PolicyDocument:
        Statement:
          Effect: "Allow"
          Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
          Resource: "*"
      Roles:
        - !Ref UploaderRole

  UploaderRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: ["lambda.amazonaws.com"]
      Path: "/"
      Policies:
        - PolicyName: "UploaderPolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: ["s3:GetObject"]
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/${Key}"
                    - { "Bucket": !Ref BuildBucket, "Key": !FindInMap [LambdaBuilds, Uploader, DEV] }
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/${Key}"
                    - { "Bucket": !Ref ConfigBucket, "Key": !FindInMap [LambdaConfig, Uploader, DEV] }
              - Effect: "Allow"
                Action: ["dynamodb:*"]
                Resource:
                  - !Sub
                    - "arn:aws:dynamodb:${Region}:${Account}:table/${Table}"
                    - { Region: !Ref "AWS::Region", Account: !Ref "AWS::AccountId", Table: !Ref "UploadTrackingDynamoTable" }
              - Effect: "Allow"
                Action: ["s3:GetObject"]
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/*"
                    - { "Bucket": !Ref UploadBucketName }

  UploaderS3EventsLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Updates upload progress based on S3 events"
      Handler: "com.gu.media.S3EventsLambda::handleRequest"
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: !FindInMap [LambdaBuilds, Uploader, DEV]
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          STACK: !Ref Stack
          APP: "media-atom-uploader"
          STAGE: !Ref Stage
          CONFIG_BUCKET: !Ref ConfigBucket
          CONFIG_KEY: !FindInMap [LambdaConfig, Uploader, DEV]
      MemorySize: 256
      Role: !GetAtt UploaderRole.Arn
      Runtime: "java8"
      Timeout: 300

  UploaderS3EventsPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref UploaderS3EventsLambda
      Principal: "s3.amazonaws.com"
      # use hard-coded name rather than ref to avoid circular dependency
      SourceArn: !Sub
        - "arn:aws:s3:::${Name}"
        - { Name: !Ref UploadBucketName }

  TranscoderOutputS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref TranscodeOutputBucketName

  TranscoderRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: ["lambda.amazonaws.com"]
      Path: "/"
      Policies:
        - PolicyName: "TranscoderPolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: ["elastictranscoder:CreateJob"]
                Resource: ["arn:aws:elastictranscoder:*"]

  TranscoderLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Transcodes masters to mp4s"
      Handler: "com.gu.media.TranscoderLambda::handleRequest"
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: !FindInMap [LambdaBuilds, Transcoder, DEV]
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          STACK: !Ref Stack
          APP: "media-atom-transcoder"
          STAGE: !Ref Stage
      MemorySize: 256
      Role: !GetAtt TranscoderRole.Arn
      Runtime: "java8"
      Timeout: 300

  ExpirerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: ["lambda.amazonaws.com"]
      Path: "/"
      Policies:
        - PolicyName: "ExpirerPolicy"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action: ["s3:GetObject"]
                Resource:
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/${Key}"
                    - { "Bucket": !Ref BuildBucket, "Key": !FindInMap [LambdaBuilds, Expirer, DEV] }
                  - !Sub
                    - "arn:aws:s3:::${Bucket}/${Key}"
                    - { "Bucket": !Ref ConfigBucket, "Key": !FindInMap [LambdaConfig, Expirer, DEV] }

  ExpirerLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Description: "Expires atoms"
      Handler: "com.gu.media.expirer.ExpirerLambda::handleRequest"
      Code:
        S3Bucket: !Ref BuildBucket
        S3Key: !FindInMap [LambdaBuilds, Expirer, DEV]
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          STACK: !Ref Stack
          APP: "media-atom-expirer"
          STAGE: !Ref Stage
          CONFIG_BUCKET: !Ref ConfigBucket
          CONFIG_KEY: !FindInMap [LambdaConfig, Expirer, DEV]
      MemorySize: 256
      Role: !GetAtt UploaderRole.Arn
      Runtime: "java8"
      Timeout: 300

  ExpirerLambdaTrigger:
    Type: "AWS::Events::Rule"
    Properties:
      ScheduleExpression: "cron(0/15 * * * ? *)"
      Targets:
        - Arn: !GetAtt ExpirerLambda.Arn
          Id: "ExpirerLambda"

  ExpirerLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref ExpirerLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt ExpirerLambdaTrigger.Arn

  PlutoIntegrationIncomingStream:
    Type: AWS::Kinesis::Stream
    Properties:
      ShardCount: 1
      Tags:
      - Key: Stage
        Value:
          Ref: Stage
      - Key: Stack
        Value:
          Ref: Stack

  PlutoIntegrationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            AWS: !Ref MultimediaAccountId
      Path: "/"
      Policies:
      - PolicyName: PlutoIntegrationRolePolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
              !GetAtt PlutoIntegrationIncomingStream.Arn
            Effect: Allow
            Action:
            - kinesis:PutRecord
            - kinesis:PutRecords

Outputs:
  EditsDynamoTable:
    Value:
      Ref: "MediaAtomsDynamoTable"
  PublishedDynamoTable:
    Value:
      Ref: "PublishedMediaAtomsDynamoTable"
  AuditsDynamoTable:
    Value:
      Ref: "AuditMediaAtomMakerDynamoTable"
  UploadTrackingDynamoTable:
    Value:
      Ref: "UploadTrackingDynamoTable"
  AwsId:
    Value:
      Ref: "HostKeys"
  AwsSecret:
    Value:
      Fn::GetAtt: ["HostKeys", "SecretAccessKey"]
  UserUploadBucket:
    Value:
      Ref: "UserUploadBucket"
  UploadRole:
    Value:
      Ref: "LimitedUploadRole"
  TranscoderOutputS3Bucket:
    Value:
      Ref: "TranscoderOutputS3Bucket"
